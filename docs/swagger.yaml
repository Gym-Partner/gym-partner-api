definitions:
  core.Error:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: Error from repository part
        type: string
      original_err: {}
    type: object
  model.Exercise:
    properties:
      equipment:
        type: boolean
      id:
        type: string
      name:
        type: string
    type: object
  model.GetUsersRequestBody:
    type: object
  model.Serie:
    properties:
      id:
        type: string
      is_warm_up:
        type: boolean
      repetitions:
        type: integer
      weight:
        type: integer
    type: object
  model.UnityOfWorkout:
    properties:
      comment:
        type: string
      exercises:
        items:
          $ref: '#/definitions/model.Exercise'
        type: array
      id:
        type: string
      nb_series:
        type: integer
      rest_time_sec:
        type: integer
      series:
        items:
          $ref: '#/definitions/model.Serie'
        type: array
    type: object
  model.User:
    properties:
      age:
        example: 24
        type: integer
      created_at:
        type: string
      email:
        example: test@test.com
        type: string
      first_name:
        example: test
        type: string
      followers:
        items:
          type: string
        type: array
      following:
        items:
          type: string
        type: array
      last_name:
        example: test
        type: string
      password:
        example: aaaAAA111
        type: string
      username:
        example: test_test
        type: string
      users_image:
        type: string
    type: object
  model.UsersImage:
    properties:
      created_at:
        type: string
      id:
        type: string
      image_url:
        type: string
      user_id:
        type: string
    type: object
  model.Workout:
    properties:
      comment:
        type: string
      day:
        type: string
      id:
        type: string
      name:
        type: string
      unities_of_workout:
        items:
          $ref: '#/definitions/model.UnityOfWorkout'
        type: array
      user_id:
        type: string
    type: object
info:
  contact: {}
paths:
  /user/create:
    post:
      consumes:
      - application/json
      description: Create new user in database and return the created user without
        the password.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: User already exist in database.
          schema:
            $ref: '#/definitions/core.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.Error'
      summary: Create a new user
      tags:
      - User
  /user/delete:
    delete:
      description: Delete one user and return nil
      parameters:
      - description: User Token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: User successfully deleted
        "400":
          description: User not exist in database
          schema:
            $ref: '#/definitions/core.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.Error'
      summary: Delete one user
      tags:
      - User
  /user/getAll:
    get:
      description: Retrieve all user in database and return this without password.
      parameters:
      - description: User's Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users successfully retrieves
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.Error'
      summary: Retrieve all user
      tags:
      - User
  /user/getOne:
    get:
      description: Retrieve one user with id in token and return this without password.
      parameters:
      - description: User Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User successfully retrieve
          schema:
            $ref: '#/definitions/model.User'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.Error'
      summary: Retrieve one user
      tags:
      - User
  /user/update:
    patch:
      consumes:
      - application/json
      description: Update on user and return nil
      parameters:
      - description: User Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User data update
        in: body
        name: user_update
        required: true
        schema:
          $ref: '#/definitions/model.User'
      responses:
        "200":
          description: User successfully updated
        "400":
          description: User not exist in database
          schema:
            $ref: '#/definitions/core.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.Error'
      summary: Update one user
      tags:
      - User
  /user/upload_image:
    post:
      consumes:
      - multipart/form-data
      description: Upload user's image in S3 aws's service and his url in database.
      parameters:
      - description: User's token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User's profile image (JPEG, PNG, max TMB)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: User's image uploaded successfully
          schema:
            $ref: '#/definitions/model.UsersImage'
        "406":
          description: User's image not available in request body
          schema:
            $ref: '#/definitions/core.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.Error'
      summary: Upload user's image
      tags:
      - User
  /user/workout/getOne:
    get:
      description: Get one workout with user id from database
      parameters:
      - description: User's token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User's workout
          schema:
            $ref: '#/definitions/model.Workout'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.Error'
      summary: Get one workout with user id
      tags:
      - Workout
  /users/get_users:
    post:
      consumes:
      - application/json
      description: Accepts a raw array of user IDs (JSON array of strings).
      parameters:
      - description: User's token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Array of user IDs (as raw JSON)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.GetUsersRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Users successfully retrieves
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.Error'
      summary: Retrieve a list of users
      tags:
      - User
  /users/search:
    get:
      description: Retrieve users in search bar, with the first letter of his first_name
        / username / email.
      parameters:
      - description: User's token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Search query (min 3 characters)
        in: query
        name: Params
        required: true
        type: string
      - description: 'Max number of users to return (default: 10, max: 50)'
        in: query
        name: limit
        type: integer
      - description: 'Number of users to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Matching users
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "400":
          description: Query too short or invalid
          schema:
            $ref: '#/definitions/core.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.Error'
      summary: Retrieves users in search bar
      tags:
      - User
  /workout/create:
    post:
      consumes:
      - application/json
      description: Create new user's workout in database and return code created
      parameters:
      - description: User's token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User's workout
        in: body
        name: user_workout
        required: true
        schema:
          $ref: '#/definitions/model.Workout'
      responses:
        "201":
          description: User's workout created
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.Error'
      summary: Create user's workout
      tags:
      - Workout
swagger: "2.0"
